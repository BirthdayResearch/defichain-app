// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WalletTokensList component should check for snapshot 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <Connect(WalletTokensList)
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "canGo": [Function],
            "createHref": [Function],
            "entries": Array [
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
            ],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "index": 0,
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
        }
        location={
          Object {
            "hash": "",
            "pathname": "/route/1",
            "search": "",
            "state": undefined,
          }
        }
        match={
          Object {
            "isExact": false,
            "params": Object {
              "id": "1",
            },
            "path": "/route/:id",
            "url": "/route/1",
          }
        }
      >
        <WalletTokensList
          accountTokens={Array []}
          fetchAccountTokensRequest={[Function]}
          fetchInstantBalanceRequest={[Function]}
          fetchTokensRequest={[Function]}
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          isAccountLoadingTokens={true}
          isAccountTokensLoaded={false}
          isLoadingTokens={true}
          isTokensLoaded={false}
          isWalletCreatedFlag={false}
          location={
            Object {
              "hash": "",
              "pathname": "/route/1",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": false,
              "params": Object {
                "id": "1",
              },
              "path": "/route/:id",
              "url": "/route/1",
            }
          }
          openResetWalletDatModal={false}
          tokens={Array []}
          unit="DFI"
          walletBalance={0}
        >
          <div>
            Loadingâ€¦
          </div>
        </WalletTokensList>
      </Connect(WalletTokensList)>
    </Provider>
  </Router>
</BrowserRouter>
`;
