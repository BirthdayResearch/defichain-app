// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CreateDCT component should check for snapshot 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <CreateDCT
        IsCollateralAddressValid={true}
        cancelConfirmation={[Function]}
        createConfirmation={[Function]}
        createdTokenData={
          Object {
            "hash": "",
          }
        }
        formState={
          Object {
            "decimal": "8",
            "isDAT": false,
            "limit": "0",
            "mintable": "true",
            "name": "",
            "receiveAddress": "",
            "receiveLabel": "",
            "symbol": "",
            "tradeable": "true",
          }
        }
        handleChange={[Function]}
        handleDropDowns={[Function]}
        isConfirmationModalOpen=""
        isErrorCreatingToken=""
        isErrorUpdatingToken=""
        isUpdate={true}
        setIsConfirmationModalOpen={[Function]}
        setWait={[Function]}
        updateConfirmation={[Function]}
        updatedTokenData={
          Object {
            "hash": "",
          }
        }
        wait={1}
      >
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          <SideEffect(NullComponent)
            defer={true}
            encodeSpecialCharacters={true}
            title="Tokens - DeFi Wallet"
            titleAttributes={Object {}}
          >
            <NullComponent
              defer={true}
              encodeSpecialCharacters={true}
              title="Tokens - DeFi Wallet"
              titleAttributes={Object {}}
            />
          </SideEffect(NullComponent)>
        </HelmetWrapper>
        <Connect(Header)>
          <Header
            openBackupWallet={[Function]}
            startUpdateApp={[Function]}
            updateAvailableBadge={false}
          >
            <header
              className="header-bar"
            >
              <Button
                className="header-bar-back"
                color="link"
                tag={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "propTypes": Object {
                      "activeClassName": [Function],
                      "activeStyle": [Function],
                      "aria-current": [Function],
                      "className": [Function],
                      "exact": [Function],
                      "innerRef": [Function],
                      "isActive": [Function],
                      "location": [Function],
                      "onClick": [Function],
                      "replace": [Function],
                      "sensitive": [Function],
                      "strict": [Function],
                      "style": [Function],
                      "target": [Function],
                      "to": [Function],
                    },
                    "render": [Function],
                  }
                }
                to="/tokens"
              >
                <NavLink
                  aria-label={null}
                  className="header-bar-back btn btn-link"
                  onClick={[Function]}
                  to="/tokens"
                >
                  <Link
                    aria-current={null}
                    aria-label={null}
                    className="header-bar-back btn btn-link"
                    onClick={[Function]}
                    to={
                      Object {
                        "hash": "",
                        "pathname": "/tokens",
                        "search": "",
                        "state": null,
                      }
                    }
                  >
                    <LinkAnchor
                      aria-current={null}
                      aria-label={null}
                      className="header-bar-back btn btn-link"
                      href="/tokens"
                      navigate={[Function]}
                      onClick={[Function]}
                    >
                      <a
                        aria-current={null}
                        aria-label={null}
                        className="header-bar-back btn btn-link"
                        href="/tokens"
                        onClick={[Function]}
                      >
                        <MdArrowBack>
                          <IconBase
                            attr={
                              Object {
                                "viewBox": "0 0 24 24",
                              }
                            }
                          >
                            <svg
                              fill="currentColor"
                              height="1em"
                              stroke="currentColor"
                              strokeWidth="0"
                              style={
                                Object {
                                  "color": undefined,
                                }
                              }
                              viewBox="0 0 24 24"
                              width="1em"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"
                                key="0"
                              />
                            </svg>
                          </IconBase>
                        </MdArrowBack>
                        <span
                          className="d-lg-inline"
                        >
                          BACK
                        </span>
                      </a>
                    </LinkAnchor>
                  </Link>
                </NavLink>
              </Button>
              <h1
                className=""
              >
                Update DCT (DeFi Custom Token)
              </h1>
            </header>
          </Header>
        </Connect(Header)>
        <div
          className="content"
        >
          <section>
            <Form
              tag="form"
            >
              <form
                className=""
              >
                <FormGroup
                  className="form-label-group"
                  tag="div"
                >
                  <div
                    className="form-label-group form-group"
                  >
                    <Input
                      id="name"
                      invalid={false}
                      name="name"
                      onChange={[Function]}
                      placeholder="Name of token"
                      type="text"
                      valid={false}
                      value=""
                    >
                      <input
                        aria-invalid={false}
                        className="form-control"
                        id="name"
                        name="name"
                        onChange={[Function]}
                        placeholder="Name of token"
                        type="text"
                        value=""
                      />
                    </Input>
                    <Label
                      for="message"
                      tag="label"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                    >
                      <label
                        className=""
                        htmlFor="message"
                      >
                        Name of token
                      </label>
                    </Label>
                  </div>
                </FormGroup>
                <FormGroup
                  className="form-label-group"
                  tag="div"
                >
                  <div
                    className="form-label-group form-group"
                  >
                    <Input
                      disabled={true}
                      id="symbol"
                      invalid={false}
                      name="symbol"
                      onChange={[Function]}
                      placeholder="Ticker symbol"
                      required={true}
                      type="text"
                      valid={false}
                      value=""
                    >
                      <input
                        aria-invalid={false}
                        className="form-control"
                        disabled={true}
                        id="symbol"
                        name="symbol"
                        onChange={[Function]}
                        placeholder="Ticker symbol"
                        required={true}
                        type="text"
                        value=""
                      />
                    </Input>
                    <Label
                      for="message"
                      tag="label"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                    >
                      <label
                        className=""
                        htmlFor="message"
                      >
                        Ticker symbol
                      </label>
                    </Label>
                  </div>
                </FormGroup>
                <Connect(AddressDropdown)
                  additionalClass={[Function]}
                  formState={
                    Object {
                      "decimal": "8",
                      "isDAT": false,
                      "limit": "0",
                      "mintable": "true",
                      "name": "",
                      "receiveAddress": "",
                      "receiveLabel": "",
                      "symbol": "",
                      "tradeable": "true",
                    }
                  }
                  getTransactionLabel={[Function]}
                  isDisabled={true}
                  onSelectAddress={[Function]}
                >
                  <AddressDropdown
                    additionalClass={[Function]}
                    dispatch={[Function]}
                    formState={
                      Object {
                        "decimal": "8",
                        "isDAT": false,
                        "limit": "0",
                        "mintable": "true",
                        "name": "",
                        "receiveAddress": "",
                        "receiveLabel": "",
                        "symbol": "",
                        "tradeable": "true",
                      }
                    }
                    getTransactionLabel={[Function]}
                    isDisabled={true}
                    onSelectAddress={[Function]}
                    paymentRequests={Array []}
                  >
                    <UncontrolledDropdown
                      className="w-100"
                    >
                      <Dropdown
                        a11y={true}
                        active={false}
                        addonType={false}
                        className="w-100"
                        direction="down"
                        inNavbar={false}
                        isOpen={false}
                        nav={false}
                        setActiveFromChild={false}
                        toggle={[Function]}
                      >
                        <Manager>
                          <div
                            className="w-100 dropdown"
                            onKeyDown={[Function]}
                          >
                            <DropdownToggle
                              aria-haspopup={true}
                              caret={true}
                              className="undefined "
                              color="outline-secondary"
                              disabled={true}
                            >
                              <Reference>
                                <InnerReference
                                  setReferenceNode={[Function]}
                                >
                                  <Button
                                    aria-expanded={false}
                                    aria-haspopup={true}
                                    className="undefined  dropdown-toggle"
                                    color="outline-secondary"
                                    disabled={true}
                                    innerRef={[Function]}
                                    onClick={[Function]}
                                    tag="button"
                                  >
                                    <button
                                      aria-expanded={false}
                                      aria-haspopup={true}
                                      aria-label={null}
                                      className="undefined  dropdown-toggle btn btn-outline-secondary disabled"
                                      disabled={true}
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <div
                                        className="undefined undefined"
                                      >
                                        Collateral address
                                      </div>
                                    </button>
                                  </Button>
                                </InnerReference>
                              </Reference>
                            </DropdownToggle>
                            <DropdownMenu
                              className="undefined w-100"
                              flip={true}
                              tag="div"
                            >
                              <div
                                aria-hidden={true}
                                className="undefined w-100 dropdown-menu"
                                role="menu"
                                tabIndex="-1"
                              >
                                <DropdownItem
                                  className="w-100"
                                  tag="button"
                                  toggle={true}
                                >
                                  <button
                                    className="w-100 dropdown-item"
                                    onClick={[Function]}
                                    role="menuitem"
                                    tabIndex="0"
                                    type="button"
                                  >
                                    <Row
                                      className="w-100"
                                      tag="div"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <div
                                        className="w-100 row"
                                      >
                                        <Col
                                          md="6"
                                          tag="div"
                                          widths={
                                            Array [
                                              "xs",
                                              "sm",
                                              "md",
                                              "lg",
                                              "xl",
                                            ]
                                          }
                                        >
                                          <div
                                            className="col-md-6"
                                          >
                                            Address
                                          </div>
                                        </Col>
                                        <Col
                                          md="3"
                                          tag="div"
                                          widths={
                                            Array [
                                              "xs",
                                              "sm",
                                              "md",
                                              "lg",
                                              "xl",
                                            ]
                                          }
                                        >
                                          <div
                                            className="col-md-3"
                                          >
                                            Label
                                          </div>
                                        </Col>
                                        <Col
                                          md="3"
                                          tag="div"
                                          widths={
                                            Array [
                                              "xs",
                                              "sm",
                                              "md",
                                              "lg",
                                              "xl",
                                            ]
                                          }
                                        >
                                          <div
                                            className="col-md-3"
                                          >
                                            Selected
                                          </div>
                                        </Col>
                                      </div>
                                    </Row>
                                  </button>
                                </DropdownItem>
                              </div>
                            </DropdownMenu>
                          </div>
                        </Manager>
                      </Dropdown>
                    </UncontrolledDropdown>
                  </AddressDropdown>
                </Connect(AddressDropdown)>
              </form>
            </Form>
          </section>
        </div>
        <Footer
          IsCollateralAddressValid={true}
          cancelConfirmation={[Function]}
          createConfirmation={[Function]}
          createdTokenData={
            Object {
              "hash": "",
            }
          }
          formState={
            Object {
              "decimal": "8",
              "isDAT": false,
              "limit": "0",
              "mintable": "true",
              "name": "",
              "receiveAddress": "",
              "receiveLabel": "",
              "symbol": "",
              "tradeable": "true",
            }
          }
          isConfirmationModalOpen=""
          isErrorCreatingToken=""
          isErrorUpdatingToken=""
          isUpdate={true}
          setIsConfirmationModalOpen={[Function]}
          updateConfirmation={[Function]}
          updatedTokenData={
            Object {
              "hash": "",
            }
          }
          wait={1}
        >
          <footer
            className="footer-bar"
          >
            <div
              className="d-none"
            >
              <Row
                className="justify-content-between align-items-center"
                tag="div"
                widths={
                  Array [
                    "xs",
                    "sm",
                    "md",
                    "lg",
                    "xl",
                  ]
                }
              >
                <div
                  className="justify-content-between align-items-center row"
                >
                  <Col
                    className="col-auto"
                    tag="div"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                  >
                    <div
                      className="col-auto col"
                    >
                      <div
                        className="caption-secondary"
                      >
                        DFI required
                      </div>
                      <div>
                        101
                         
                        DFI
                      </div>
                    </div>
                  </Col>
                  <Col
                    className="d-flex justify-content-end"
                    tag="div"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                  >
                    <div
                      className="d-flex justify-content-end col"
                    >
                      <Button
                        className="mr-3"
                        color="link"
                        tag={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "propTypes": Object {
                              "activeClassName": [Function],
                              "activeStyle": [Function],
                              "aria-current": [Function],
                              "className": [Function],
                              "exact": [Function],
                              "innerRef": [Function],
                              "isActive": [Function],
                              "location": [Function],
                              "onClick": [Function],
                              "replace": [Function],
                              "sensitive": [Function],
                              "strict": [Function],
                              "style": [Function],
                              "target": [Function],
                              "to": [Function],
                            },
                            "render": [Function],
                          }
                        }
                        to="/tokens"
                      >
                        <NavLink
                          aria-label={null}
                          className="mr-3 btn btn-link"
                          onClick={[Function]}
                          to="/tokens"
                        >
                          <Link
                            aria-current={null}
                            aria-label={null}
                            className="mr-3 btn btn-link"
                            onClick={[Function]}
                            to={
                              Object {
                                "hash": "",
                                "pathname": "/tokens",
                                "search": "",
                                "state": null,
                              }
                            }
                          >
                            <LinkAnchor
                              aria-current={null}
                              aria-label={null}
                              className="mr-3 btn btn-link"
                              href="/tokens"
                              navigate={[Function]}
                              onClick={[Function]}
                            >
                              <a
                                aria-current={null}
                                aria-label={null}
                                className="mr-3 btn btn-link"
                                href="/tokens"
                                onClick={[Function]}
                              >
                                Cancel
                              </a>
                            </LinkAnchor>
                          </Link>
                        </NavLink>
                      </Button>
                      <Button
                        color="primary"
                        disabled={true}
                        onClick={[Function]}
                        tag="button"
                      >
                        <button
                          aria-label={null}
                          className="btn btn-primary disabled"
                          disabled={true}
                          onClick={[Function]}
                          type="button"
                        >
                          Update token
                        </button>
                      </Button>
                    </div>
                  </Col>
                </div>
              </Row>
            </div>
            <div
              className="d-none"
            >
              <div
                className="footer-sheet"
              >
                <dl
                  className="row"
                >
                  <dd
                    className="col-12"
                  >
                    <span
                      className="h2 mb-0"
                    >
                      Are you sure you want to update a token?
                    </span>
                  </dd>
                </dl>
              </div>
              <Row
                className="justify-content-between align-items-center"
                tag="div"
                widths={
                  Array [
                    "xs",
                    "sm",
                    "md",
                    "lg",
                    "xl",
                  ]
                }
              >
                <div
                  className="justify-content-between align-items-center row"
                >
                  <Col
                    className="d-flex justify-content-end"
                    tag="div"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                  >
                    <div
                      className="d-flex justify-content-end col"
                    >
                      <Button
                        className="mr-3"
                        color="link"
                        onClick={[Function]}
                        tag="button"
                      >
                        <button
                          aria-label={null}
                          className="mr-3 btn btn-link"
                          onClick={[Function]}
                          type="button"
                        >
                          Cancel
                        </button>
                      </Button>
                      <Button
                        color="primary"
                        disabled={true}
                        onClick={[Function]}
                        tag="button"
                      >
                        <button
                          aria-label={null}
                          className="btn btn-primary disabled"
                          disabled={true}
                          onClick={[Function]}
                          type="button"
                        >
                          Continue
                           
                          <span
                            className="timer"
                          >
                            1
                          </span>
                        </button>
                      </Button>
                    </div>
                  </Col>
                </div>
              </Row>
            </div>
            <div
              className="d-none"
            >
              <div
                className="footer-sheet"
              >
                <div
                  className="text-center"
                >
                  <Spinner>
                    <svg
                      viewBox="0 0 48 48"
                    >
                      <circle
                        cx="24"
                        cy="24"
                        fill="none"
                        r="16"
                        strokeWidth="6"
                      />
                    </svg>
                  </Spinner>
                </div>
              </div>
            </div>
            <div
              className="d-none"
            >
              <div
                className="footer-sheet"
              >
                <div
                  className="text-center"
                >
                  <p>
                    Token was updated successfully
                  </p>
                  <MdCheckCircle
                    className="footer-sheet-icon"
                  >
                    <IconBase
                      attr={
                        Object {
                          "viewBox": "0 0 24 24",
                        }
                      }
                      className="footer-sheet-icon"
                    >
                      <svg
                        className="footer-sheet-icon"
                        fill="currentColor"
                        height="1em"
                        stroke="currentColor"
                        strokeWidth="0"
                        style={
                          Object {
                            "color": undefined,
                          }
                        }
                        viewBox="0 0 24 24"
                        width="1em"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                          key="0"
                        />
                      </svg>
                    </IconBase>
                  </MdCheckCircle>
                  <p>
                    Token Hash: 
                  </p>
                </div>
              </div>
              <Row
                className="justify-content-between align-items-center"
                tag="div"
                widths={
                  Array [
                    "xs",
                    "sm",
                    "md",
                    "lg",
                    "xl",
                  ]
                }
              >
                <div
                  className="justify-content-between align-items-center row"
                >
                  <Col
                    className="d-flex justify-content-end"
                    tag="div"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                  >
                    <div
                      className="d-flex justify-content-end col"
                    >
                      <ViewOnChain
                        txid=""
                      >
                        <Button
                          className="mr-3"
                          color="link"
                          onClick={[Function]}
                          tag="button"
                        >
                          <button
                            aria-label={null}
                            className="mr-3 btn btn-link"
                            onClick={[Function]}
                            type="button"
                          >
                            View on chain
                          </button>
                        </Button>
                      </ViewOnChain>
                      <Button
                        color="primary"
                        tag={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "propTypes": Object {
                              "activeClassName": [Function],
                              "activeStyle": [Function],
                              "aria-current": [Function],
                              "className": [Function],
                              "exact": [Function],
                              "innerRef": [Function],
                              "isActive": [Function],
                              "location": [Function],
                              "onClick": [Function],
                              "replace": [Function],
                              "sensitive": [Function],
                              "strict": [Function],
                              "style": [Function],
                              "target": [Function],
                              "to": [Function],
                            },
                            "render": [Function],
                          }
                        }
                        to="/tokens"
                      >
                        <NavLink
                          aria-label={null}
                          className="btn btn-primary"
                          onClick={[Function]}
                          to="/tokens"
                        >
                          <Link
                            aria-current={null}
                            aria-label={null}
                            className="btn btn-primary"
                            onClick={[Function]}
                            to={
                              Object {
                                "hash": "",
                                "pathname": "/tokens",
                                "search": "",
                                "state": null,
                              }
                            }
                          >
                            <LinkAnchor
                              aria-current={null}
                              aria-label={null}
                              className="btn btn-primary"
                              href="/tokens"
                              navigate={[Function]}
                              onClick={[Function]}
                            >
                              <a
                                aria-current={null}
                                aria-label={null}
                                className="btn btn-primary"
                                href="/tokens"
                                onClick={[Function]}
                              >
                                Back to token
                              </a>
                            </LinkAnchor>
                          </Link>
                        </NavLink>
                      </Button>
                    </div>
                  </Col>
                </div>
              </Row>
            </div>
            <div
              className="d-none"
            >
              <div
                className="footer-sheet"
              >
                <div
                  className="text-center"
                >
                  <MdErrorOutline
                    className="footer-sheet-icon undefined"
                  >
                    <IconBase
                      attr={
                        Object {
                          "viewBox": "0 0 24 24",
                        }
                      }
                      className="footer-sheet-icon undefined"
                    >
                      <svg
                        className="footer-sheet-icon undefined"
                        fill="currentColor"
                        height="1em"
                        stroke="currentColor"
                        strokeWidth="0"
                        style={
                          Object {
                            "color": undefined,
                          }
                        }
                        viewBox="0 0 24 24"
                        width="1em"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
                          key="0"
                        />
                      </svg>
                    </IconBase>
                  </MdErrorOutline>
                  <p />
                </div>
              </div>
              <div
                className="d-flex align-items-center justify-content-center"
              >
                <Button
                  color="primary"
                  tag={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "activeClassName": [Function],
                        "activeStyle": [Function],
                        "aria-current": [Function],
                        "className": [Function],
                        "exact": [Function],
                        "innerRef": [Function],
                        "isActive": [Function],
                        "location": [Function],
                        "onClick": [Function],
                        "replace": [Function],
                        "sensitive": [Function],
                        "strict": [Function],
                        "style": [Function],
                        "target": [Function],
                        "to": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  to="/tokens"
                >
                  <NavLink
                    aria-label={null}
                    className="btn btn-primary"
                    onClick={[Function]}
                    to="/tokens"
                  >
                    <Link
                      aria-current={null}
                      aria-label={null}
                      className="btn btn-primary"
                      onClick={[Function]}
                      to={
                        Object {
                          "hash": "",
                          "pathname": "/tokens",
                          "search": "",
                          "state": null,
                        }
                      }
                    >
                      <LinkAnchor
                        aria-current={null}
                        aria-label={null}
                        className="btn btn-primary"
                        href="/tokens"
                        navigate={[Function]}
                        onClick={[Function]}
                      >
                        <a
                          aria-current={null}
                          aria-label={null}
                          className="btn btn-primary"
                          href="/tokens"
                          onClick={[Function]}
                        >
                          Back to token
                        </a>
                      </LinkAnchor>
                    </Link>
                  </NavLink>
                </Button>
              </div>
            </div>
          </footer>
        </Footer>
      </CreateDCT>
    </Provider>
  </Router>
</BrowserRouter>
`;
