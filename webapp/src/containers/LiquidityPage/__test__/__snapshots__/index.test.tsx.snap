// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LiquidityPage component should check for snapshot 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <Connect(LiquidityPage)
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "canGo": [Function],
            "createHref": [Function],
            "entries": Array [
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
            ],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "index": 0,
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
        }
        location={
          Object {
            "hash": "",
            "pathname": "/route/1",
            "search": "",
            "state": undefined,
          }
        }
        match={
          Object {
            "isExact": false,
            "params": Object {
              "id": "1",
            },
            "path": "/route/:id",
            "url": "/route/1",
          }
        }
      >
        <LiquidityPage
          fetchPoolPairListRequest={[Function]}
          fetchPoolsharesRequest={[Function]}
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          isLoadingPoolshares={true}
          isPoolsharesLoaded={false}
          location={
            Object {
              "hash": "",
              "pathname": "/route/1",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": false,
              "params": Object {
                "id": "1",
              },
              "path": "/route/:id",
              "url": "/route/1",
            }
          }
          poolPairList={Array []}
          poolshares={Array []}
        >
          <div
            className="main-wrapper"
          >
            <HelmetWrapper
              defer={true}
              encodeSpecialCharacters={true}
            >
              <SideEffect(NullComponent)
                defer={true}
                encodeSpecialCharacters={true}
                title="Liquidity - DeFi Wallet"
                titleAttributes={Object {}}
              >
                <NullComponent
                  defer={true}
                  encodeSpecialCharacters={true}
                  title="Liquidity - DeFi Wallet"
                  titleAttributes={Object {}}
                />
              </SideEffect(NullComponent)>
            </HelmetWrapper>
            <Connect(Header)>
              <Header
                openBackupWallet={[Function]}
                startUpdateApp={[Function]}
                updateAvailableBadge={false}
              >
                <header
                  className="header-bar"
                >
                  <h1>
                    Liquidity pools
                  </h1>
                  <ButtonGroup
                    role="group"
                    tag="div"
                  >
                    <div
                      className="btn-group"
                      role="group"
                    >
                      <Button
                        color="link"
                        tag={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "propTypes": Object {
                              "activeClassName": [Function],
                              "activeStyle": [Function],
                              "aria-current": [Function],
                              "className": [Function],
                              "exact": [Function],
                              "innerRef": [Function],
                              "isActive": [Function],
                              "location": [Function],
                              "onClick": [Function],
                              "replace": [Function],
                              "sensitive": [Function],
                              "strict": [Function],
                              "style": [Function],
                              "target": [Function],
                              "to": [Function],
                            },
                            "render": [Function],
                          }
                        }
                        to="/liquidity/createpoolpair"
                      >
                        <NavLink
                          aria-label={null}
                          className="btn btn-link"
                          onClick={[Function]}
                          to="/liquidity/createpoolpair"
                        >
                          <Link
                            aria-current={null}
                            aria-label={null}
                            className="btn btn-link"
                            onClick={[Function]}
                            to={
                              Object {
                                "hash": "",
                                "pathname": "/liquidity/createpoolpair",
                                "search": "",
                                "state": null,
                              }
                            }
                          >
                            <LinkAnchor
                              aria-current={null}
                              aria-label={null}
                              className="btn btn-link"
                              href="/liquidity/createpoolpair"
                              navigate={[Function]}
                              onClick={[Function]}
                            >
                              <a
                                aria-current={null}
                                aria-label={null}
                                className="btn btn-link"
                                href="/liquidity/createpoolpair"
                                onClick={[Function]}
                              >
                                <MdAdd>
                                  <IconBase
                                    attr={
                                      Object {
                                        "viewBox": "0 0 24 24",
                                      }
                                    }
                                  >
                                    <svg
                                      fill="currentColor"
                                      height="1em"
                                      stroke="currentColor"
                                      strokeWidth="0"
                                      style={
                                        Object {
                                          "color": undefined,
                                        }
                                      }
                                      viewBox="0 0 24 24"
                                      width="1em"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path
                                        d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
                                        key="0"
                                      />
                                    </svg>
                                  </IconBase>
                                </MdAdd>
                                <span
                                  className="d-lg-inline"
                                >
                                  Add liquidity
                                </span>
                              </a>
                            </LinkAnchor>
                          </Link>
                        </NavLink>
                      </Button>
                    </div>
                  </ButtonGroup>
                </header>
              </Header>
            </Connect(Header)>
            <div
              className="content"
            >
              Loadingâ€¦
            </div>
          </div>
        </LiquidityPage>
      </Connect(LiquidityPage)>
    </Provider>
  </Router>
</BrowserRouter>
`;
